(* This is an OCaml editor.
   Enter your program here and send it to the toplevel using the "Eval code"
   button or [Ctrl-e]. *)



let collatz n =
  let c = ref 0 in
  let n1 = ref n in 
  while !n1 != 1 do
    n1 := if (!n1 mod 2) = 0 then !n1 / 2 else !n1 * 3 + 1; 
    c := !c + 1; 
  done;
  !c;;





(* This is an OCaml editor.
   Enter your program here and send it to the toplevel using the "Eval code"
   button or [Ctrl-e]. *)



let get_first arr =
  match arr with
    [] -> [] 
  | h::rest -> h
;;

let get_rest arr =
  match arr with
    [] -> [] |
    h::rest -> rest 
;;

let rec coin_change coins num = 
  if num < 0 then 0 else if num = 0 then 1 else
    let c = get_first coins in
    print_string c;
    match c with
      [] -> 0 |
      h -> coin_change coins (num - c) + coin_change coins (num - c -c) + coin_change (get_rest coins) (num-c);;
  



let get_first arr =
  match arr with
    [] -> [] 
  | h::rest -> [h]
;;

let tail arr =
  match arr with
    [] -> [] |
    h::rest -> rest 
;;

let rec coin_change coins outstanding = 
  if outstanding < 0 then 0 else if outstanding = 0 then 1 else
    let c = get_first coins in 
    match c with
      [] -> 0 |
      [h]-> coin_change coins (outstanding - h) + coin_change (tail coins) (outstanding);;





